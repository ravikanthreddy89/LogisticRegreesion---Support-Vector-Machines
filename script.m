clearvars;clc;[train_data, train_label, validation_data, validation_label, test_data, test_label] = preprocess();save('dataset.mat', 'train_data', 'train_label', 'validation_data', 'validation_label', 'test_data', 'test_label');load('dataset.mat');n_class = 10;T = zeros(size(train_label, 1), n_class);for i = 1 : n_class    T(:, i) = (train_label == i);end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Logistic Regression with Gradient Descent*******************%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%fprintf('\nLogistic regression with Gradient descent\n');options = optimset('MaxIter', 200);W = zeros(size(train_data, 2) + 1, n_class);initialWeights = zeros(size(train_data, 2) + 1, 1);for i = 1 : n_class    objFunction = @(params) blrObjFunction(params, train_data, T(:, i));    [w, ~] = fmincg(objFunction, initialWeights, options);    W(:, i) = w;endpredicted_label = blrPredict(W, train_data);fprintf('\nTraining Set Accuracy: %f\n', mean(double(predicted_label == train_label)) * 100);predicted_label = blrPredict(W, validation_data);fprintf('\nValidation Set Accuracy: %f\n', mean(double(predicted_label == validation_label)) * 100);predicted_label = blrPredict(W, test_data);fprintf('\nTest Set Accuracy: %f\n', mean(double(predicted_label == test_label)) * 100);%return;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Logistic Regression with Newton-Raphson method**************%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% (extra credits)% (un-comment this block of code to run)fprintf('\nLogistic regression with Newton-Raphson method\n');W = zeros(size(train_data, 2) + 1, n_class);initialWeights = zeros(size(train_data, 2) + 1, 1);n_iter = 5;for i = 1 : n_class    W(:, i) = blrNewtonRaphsonLearn(initialWeights, train_data, T(:, i), n_iter); end% predicted_label = blrPredict(W, train_data);fprintf('\nTraining Set Accuracy: %f\n', mean(double(predicted_label == train_label)) * 100);% predicted_label = blrPredict(W, validation_data);fprintf('\nValidation Set Accuracy: %f\n', mean(double(predicted_label == validation_label)) * 100);% predicted_label = blrPredict(W, test_data);fprintf('\nTest Set Accuracy: %f\n', mean(double(predicted_label == test_label)) * 100);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Multiclass Logistic Regression with Gradient Descent *******%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% (extra credits)% (un-comment this block of code to run)fprintf('\nMulticlass Logistic regression with gradient descent\n');options = optimset('MaxIter', 200);initialWeights = zeros((size(train_data, 2) + 1) * n_class, 1);     objFunction = @(params) mlrObjFunction(params, train_data, T);[W, cost] = fmincg(objFunction, initialWeights, options);W = reshape(W, size(train_data, 2) + 1, n_class);    predicted_label = mlrPredict(W, train_data);fprintf('\nTraining Set Accuracy: %f\n', mean(double(predicted_label == train_label)) * 100); predicted_label = mlrPredict(W, validation_data);fprintf('\nValidation Set Accuracy: %f\n', mean(double(predicted_label == validation_label)) * 100); predicted_label = mlrPredict(W, test_data);fprintf('\nTest Set Accuracy: %f\n', mean(double(predicted_label == test_label)) * 100);return;%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Multiclass Logistic Regression with Newton-Raphson method **%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% (extra credits)% (un-comment this block of code to run)% initialWeights = zeros((size(train_data, 2) + 1) * n_class, 1);% n_iter = 5;% [W] = mlrNewtonRaphsonLearn(initialWeights, train_data, T, n_iter);% % predicted_label = mlrPredict(W, train_data);% fprintf('\nTraining Set Accuracy: %f\n', mean(double(predicted_label == train_label)) * 100);% % predicted_label = mlrPredict(W, validation_data);% fprintf('\nValidation Set Accuracy: %f\n', mean(double(predicted_label == validation_label)) * 100);% % predicted_label = mlrPredict(W, test_data);% fprintf('\nTest Set Accuracy: %f\n', mean(double(predicted_label == test_label)) * 100);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Support Vector Machine**************************************%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   YOUR CODE HERE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%